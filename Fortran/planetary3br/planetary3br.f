C ATLAS OF PLANETARY THREE BODY RESONANCES
C TABARE GALLARDO 2016
      IMPLICIT REAL*8 (A-H,O-Z)
      REAL*8 KGAUS,KG2
      REAL*8 J0,J1,J2,L0,L1,L2,LA2,LA1
C MAXIMUM NUMBER OF RESONANCES
      PARAMETER (MAXRES=100000,MCA=100)
      DIMENSION SE(0:2),SM(0:2),SN(0:2)
      DIMENSION NPLA1(MAXRES),NPLA2(MAXRES),KAST(MAXRES),KPLA1(MAXRES)
      DIMENSION KPLA2(MAXRES),AAST(MAXRES),INDICE(MAXRES)
      DIMENSION NKAST(MAXRES),NKPLA1(MAXRES),NKPLA2(MAXRES)
      DIMENSION NNPLA1(MAXRES),NNPLA2(MAXRES),SEMI(MAXRES)
      DIMENSION II(MAXRES)
      DIMENSION VECR2(MCA),VECX2(MCA),VECY2(MCA),VECZ2(MCA),LA2(MCA)
      DIMENSION VECR1(MCA),VECX1(MCA),VECY1(MCA),VECZ1(MCA),LA1(MCA)
      COMMON VECR2,VECX2,VECY2,VECZ2,LA2
      COMMON VECR1,VECX1,VECY1,VECZ1,LA1
      COMMON SE,SM,SN,STARM
      COMMON E0,E1,E2,J0,J1,J2,L0,L1,L2,P0,P1,P2
      CHARACTER*50 APESOS
      CHARACTER*52 CABEZAL
      CHARACTER*39 CABEZAL2
      CHARACTER*91 CABEZAL3
      CABEZAL='        N      a0(au)     k0    k1    k2     p     q'
      CABEZAL2='       S_0           S_1           S_2'
      CABEZAL3=CABEZAL//CABEZAL2


      TWOPI = 8.0D0*DATAN(1.0D0)
      CERO  = 0.0D0
      UNO   = 1.0D0
      PI=TWOPI/2.D0
      G2R=PI/180.D0
      DOST=2.D0/3.D0
      UNT=1.D0/3.D0
      KGAUS=0.01720209895D0
      KG2=KGAUS**2
      OPEN(1,FILE="p3br.inp")
      READ(1,1004) APESOS
C MASS OF THE STAR IN SOLAR MASSES
      READ(1,*) STARM
      READ(1,1004) APESOS
      READ(1,*) XXXXX,E0,J0,L0,P0,SM(0)
      READ(1,*) SE(1),E1,J1,L1,P1,SM(1)
      READ(1,*) SE(2),E2,J2,L2,P2,SM(2)
      CLOSE(1)
      J0=J0*G2R
      J1=J1*G2R
      J2=J2*G2R
      L0=L0*G2R
      L1=L1*G2R
      L2=L2*G2R
      P0=P0*G2R
      P1=P1*G2R
      P2=P2*G2R

      A1=SE(1)
      A2=SE(2)
C UNIT = K^2
      write(*,*)'------------------------------------------------------'
      write(*,*)'           PLANETARY THREE BODY RESONANCES  '
      write(*,*)' this program calculates the locations and strengths  '
      write(*,*)'   corresponding to all three-body resonances in a '
      write(*,*)'  planetary or satellite system between (a_min,a_max)'
      write(*,*)'  according to Gallardo, Coito, Badano (2016, Icarus).'
      write(*,*)'          www.fisica.edu.uy/~gallardo/atlas'
      write(*,*)'           '
      write(*,*)'                input file: p3br.inp  '
      WRITE(*,*)'           '
      WRITE(*,*)'------------------------------------------------------'
      WRITE(*,*)' '
      WRITE(*,*)' '
C MAX P
      WRITE(*,*)'max p = |k0| + |k1| + |k2| (less than 50)? '
      READ(*,*)SUPERIOR
      ISUP=IDINT(SUPERIOR)
C MAX ORDER Q
      WRITE(*,*)'max q = |k0 + k1 + k2| (less than 50)? '
      READ(*,*)MAXORDER
C      SUPERIOR=20
C PLANETS  1 and 2
      IPLA1=1
      IPLA2=2
C LIMITS IN SEMIMAJOR AXIS
      WRITE(*,*)'interval to be analyzed: a_min,a_max? (ex: 3.1,3.3)'
      READ(*,*)A2MIN,A2MAX
C      A2MIN=0.01
C      A2MAX=1000.0
      DO I=1,MAXRES
        II(I)=0
      ENDDO
C PLANETARY MEAN MOTIONS
      DO I=1,2
        SN(I)=DSQRT(KG2*(STARM+SM(I))/SE(I)**3)
      ENDDO
C LOOKING FOR ALL POSSIBLE RESONANCES
      I=0
      DO 100 IP1=IPLA1,IPLA2
      DO 101 IP2=IP1+1,IPLA2
      DO 102 IAST=1,ISUP
        CAST=IAST*1.D0
        DO 103 IPL1=1,2*ISUP+1
          CPL1=(IPL1-ISUP-1)*1.D0
          IF(CPL1.EQ.0.D0) THEN
            GOTO 103
          END IF
          DO 104 IPL2=1,2*ISUP+1
            CPL2=(IPL2-ISUP-1)*1.D0
          IF(CPL2.EQ.0.D0) THEN
            GOTO 104
          END IF
C THREE CONSTANTS CANNOT BE ALL POSITIVE
          IF(CPL1.GT.0.D0.AND.CPL2.GT.0.D0) THEN
            GOTO 104
          END IF
C ORDER LESS THAN MAXORDER
          IORDER=IDINT(DABS(CAST+CPL1+CPL2))
          IF(IORDER.GT.MAXORDER) THEN
            GOTO 104
          END IF
          HINDICE=CAST+DABS(CPL1)+DABS(CPL2)
          AMM=-(CPL1*SN(IP1)+CPL2*SN(IP2))/CAST
C MEAN MOTIONS MUST BE POSITIVE
          IF(AMM.LE.0.D0) THEN
            GOTO 104
          ENDIF
        SEM=(KG2*(STARM+SM(0))/AMM**2)**UNT
C          SEM=AMM**(-DOST)
            IF (SEM.LE.A2MAX.AND.SEM.GE.A2MIN) THEN
              IF(HINDICE.LE.SUPERIOR) THEN
C VALID RESONANCE
                I=I+1
                IF(I.GT.MAXRES) THEN
                  WRITE(*,*)"ERROR: TOO MUCH RESONANCES"
                  READ(*,*) NOTHING
                ENDIF
                KAST(I)=INT(CAST)
                KPLA1(I)=INT(CPL1)
                KPLA2(I)=INT(CPL2)
                NPLA1(I)=IP1
                NPLA2(I)=IP2
                AAST(I)=SEM
              ENDIF
            ENDIF
  104     CONTINUE
  103   CONTINUE
  102 CONTINUE
  101 CONTINUE
  100 CONTINUE
C NUMBER OF POSSIBLE RESONANCES, MUST BE LESS THAN 100000
      IDAT=I
C ELIMINATE REPEATED
      DO I=1,IDAT
        DO J=I+1,IDAT
          IF(NPLA1(J).EQ.NPLA1(I).AND.NPLA2(J).EQ.NPLA2(I)) THEN

             IDIF1=KAST(I)*KPLA1(J) - KAST(J)*KPLA1(I)
             IDIF2=KAST(I)*KPLA2(J) - KAST(J)*KPLA2(I)
             IDIF3=KPLA2(I)*KPLA1(J) - KPLA2(J)*KPLA1(I)
             INDICA = ABS(IDIF1) + ABS(IDIF2) + ABS(IDIF3)
C            DIF=DABS(AAST(J)-AAST(I))
C          IF (DIF.LT.0.000001D0.AND.ABS(KAST(J)).GT.ABS(KAST(I))) THEN
             IF (INDICA.EQ.0.AND.ABS(KAST(J)).GE.ABS(KAST(I))) THEN
C 1 MEANS ELIMINATED
              II(J)=1
             ENDIF
C          IF (DIF.LT.0.000001D0.AND.ABS(KAST(J)).LT.ABS(KAST(I))) THEN
             IF (INDICA.EQ.0.AND.ABS(KAST(J)).LT.ABS(KAST(I))) THEN
              II(I)=1
            ENDIF
          ENDIF
        ENDDO
      ENDDO
      NCONT=0
      DO I=1,IDAT
        IF (II(I).NE.1) THEN
C VALID RESONANCES
          NCONT=NCONT+1
          NKAST(NCONT)=KAST(I)
          NKPLA1(NCONT)=KPLA1(I)
          NKPLA2(NCONT)=KPLA2(I)
          NNPLA1(NCONT)=NPLA1(I)
          NNPLA2(NCONT)=NPLA2(I)
          SEMI(NCONT)=AAST(I)
          INDICE(NCONT)=ABS(KAST(I))+ABS(KPLA1(I))+ABS(KPLA2(I))
        ENDIF
      ENDDO
      WRITE(*,*)'CALCULATING ',NCONT,' RESONANCES'
C =================================================================
C STARTING CALCULATIONS FOR ALL VALID RESONANCES
        OPEN(1,file='p3brstrength.dat',status='unknown',access='append')
        WRITE(1,*) CABEZAL3
        CLOSE(1)
C 100 POSITIONS FOR PLA1 AND PLA2 CALCULATED BEFOREHAND
      CALL POSPLA(A1,E1,J1,L1,P1,VECR1,VECX1,VECY1,VECZ1,LA1)
      CALL POSPLA(A2,E2,J2,L2,P2,VECR2,VECX2,VECY2,VECZ2,LA2)
      DO I=1,NCONT
        A0=SEMI(I)
        IP1=NNPLA1(I)
        IP2=NNPLA2(I)
        CTE0=DFLOAT(NKAST(I))
        CTE1=DFLOAT(NKPLA1(I))
        CTE2=DFLOAT(NKPLA2(I))
        IORDEN=NKAST(I)+NKPLA1(I)+NKPLA2(I)
        call FUERZA3(A0,CTE0,CTE1,CTE2,FUE0,FUE1,FUE2)
        OPEN(1,file='p3brstrength.dat',status='unknown',access='append')
        WRITE(1,46) I,SEMI(I),NKAST(I),NKPLA1(I),NKPLA2(I),
     *INDICE(I),ABS(IORDEN),FUE0,FUE1,FUE2
        WRITE(*,46) I,SEMI(I),NKAST(I),NKPLA1(I),NKPLA2(I),
     *INDICE(I),ABS(IORDEN),FUE0,FUE1,FUE2
        CLOSE(1)
      ENDDO
 46   FORMAT(I10,F13.6,5I6,3(1P,E14.4))
1004  FORMAT(A76)
      STOP
      END
C ==================================================================
C CALCULATION OF THE STRENGTHS ACCORDING TO TABARE GALLARDO 2014
      SUBROUTINE FUERZA3(A0,CTE0,CTE1,CTE2,FUE0,FUE1,FUE2)
      IMPLICIT REAL*8 (A-H,J-Z)
      INTEGER MCA
      PARAMETER (MCA=100)
      DIMENSION SE(0:2),SM(0:2),SN(0:2)
      DIMENSION RP0(400),RP1(400),RP2(400),SIGMA(400)
      DIMENSION VECR2(MCA),VECX2(MCA),VECY2(MCA),VECZ2(MCA),LA2(MCA)
      DIMENSION VECR1(MCA),VECX1(MCA),VECY1(MCA),VECZ1(MCA),LA1(MCA)
      COMMON VECR2,VECX2,VECY2,VECZ2,LA2
      COMMON VECR1,VECX1,VECY1,VECZ1,LA1
      COMMON SE,SM,SN,STARM
      COMMON E0,E1,E2,J0,J1,J2,L0,L1,L2,P0,P1,P2
C      COMMON K3,K4,K5,K6,K7,K8
      CERO  = 0.0D0
      UNO   = 1.0D0
      KGAUS=0.01720209895D0
C      KG2=KGAUS**2
      TWOPI = 8.0D0*DATAN(1.0D0)
      PI=TWOPI/2.D0
      G2R=PI/180.D0
C ORDER
C      SUC=CTE0+CTE1+CTE2
      A1=SE(1)
      A2=SE(2)
C NUMBER OF EVALUATIONS OF RHO(SIGMA) BETWEEN O AND 360
C FOR MORE PRECISTION USE MORE POINTS
      ISIMAX=72
C STEPS OF THE NUMERICAL INTEGRATION
C FOR MORE PRECITION USE MORE POINTS
      IPASOS=MCA
C SIGMA = CRITICAL ANGLE
      DO 900 ISI=1,ISIMAX+1
C TETA IS SIGMA
        TETA=DFLOAT(ISI-1)/DFLOAT(ISIMAX)*360.D0
C TO RADIANS
        TETAR=TETA*G2R
C 0 IS THE TEST PLANET
C 1 IS FIXED PLANET P1
C 2 IS FIXED PLANET P2
C INTEGRAL IN LAMBDA2, INTEGRAL IN LAMBDA1
        RTOT0=CERO
        RTOT1=CERO
        RTOT2=CERO

        DO 901 IMEDIA2=1,IPASOS
          R2=VECR2(IMEDIA2)
          X2=VECX2(IMEDIA2)
          Y2=VECY2(IMEDIA2)
          Z2=VECZ2(IMEDIA2)
          LAMBDA2=LA2(IMEDIA2)
          R2TO3=R2**3
          DO 902 IMEDIA1=1,IPASOS
            R1=VECR1(IMEDIA1)
            X1=VECX1(IMEDIA1)
            Y1=VECY1(IMEDIA1)
            Z1=VECZ1(IMEDIA1)
            LAMBDA1=LA1(IMEDIA1)
            R1TO3=R1**3
C DISTANCE P1-P2
            DELTA12TO3=(DSQRT((X2-X1)**2+(Y2-Y1)**2+(Z2-Z1)**2))**3
C  DERIV R21 / DX2  Y  DERIV R21 / DY2
            DR21DX2=(X1-X2)/DELTA12TO3 - X1/R1TO3
            DR21DY2=(Y1-Y2)/DELTA12TO3 - Y1/R1TO3
            DR21DZ2=(Z1-Z2)/DELTA12TO3 - Z1/R1TO3
C FACTORIZED BY MASS
            DR21DX2=SM(1)*DR21DX2
            DR21DY2=SM(1)*DR21DY2
            DR21DZ2=SM(1)*DR21DZ2
C  DERIV R12 / DX1  Y  DERIV R12 / DY1
            DR12DX1=(X2-X1)/DELTA12TO3 - X2/R2TO3
            DR12DY1=(Y2-Y1)/DELTA12TO3 - Y2/R2TO3
            DR12DZ1=(Z2-Z1)/DELTA12TO3 - Z2/R2TO3
C FACTORIZED BY MASS
            DR12DX1=SM(2)*DR12DX1
            DR12DY1=SM(2)*DR12DY1
            DR12DZ1=SM(2)*DR12DZ1

C ESTOS TERMINOS NUEVOS DE MAYO 2015 ************************
C SCALAR PRODUCT R1*R2
        R1R2=X1*X2+Y1*Y2+Z1*Z2
        RF12=3.D0*R1R2/R2**5
C  DERIV R12 / DX2
        DR12DX2=(X1-X2)/DELTA12TO3 - X1/R2TO3 + X2*RF12
        DR12DY2=(Y1-Y2)/DELTA12TO3 - Y1/R2TO3 + Y2*RF12
        DR12DZ2=(Z1-Z2)/DELTA12TO3 - Z1/R2TO3 + Z2*RF12
C FACTORIZED BY MASS
        DR12DX2=SM(2)*DR12DX2
        DR12DY2=SM(2)*DR12DY2
        DR12DZ2=SM(2)*DR12DZ2

        RF21=3.D0*R1R2/R1**5
C  DERIV R21 / DX1
        DR21DX1=(X2-X1)/DELTA12TO3 - X2/R1TO3 + X1*RF21
        DR21DY1=(Y2-Y1)/DELTA12TO3 - Y2/R1TO3 + Y1*RF21
        DR21DZ1=(Z2-Z1)/DELTA12TO3 - Z2/R1TO3 + Z1*RF21
C FACTORIZED BY MASS
        DR21DX1=SM(1)*DR21DX1
        DR21DY1=SM(1)*DR21DY1
        DR21DZ1=SM(1)*DR21DZ1

C ***************************************************************
C PLANET 0
C LAMBDA0 IS FIXED AT RESONANCE CONDITION
C GAMMA IS  K3*P0 + K4*P1 + K5*P2 + K6*L0 + K7*L1 + K8*L2
C GAMMA DOES NOT MATTER TO CALCULATE THE STRENGTH
C BUT IT IS IMPORTANT FOR RHO(SIGMA)
C            GAMMA=K3*P0 + K4*P1 + K5*P2 + K6*L0 + K7*L1 + K8*L2

          GAMMA=0.D0

            LAMBDA00=(TETAR -GAMMA -CTE2*LAMBDA2-CTE1*LAMBDA1)/CTE0
 502        IF (LAMBDA00.GT.TWOPI) THEN
              LAMBDA00=LAMBDA00-TWOPI
              GOTO 502
            END IF
 503        IF (LAMBDA00.LT.CERO) THEN
              LAMBDA00=LAMBDA00+TWOPI
              GOTO 503
            END IF
C K0 POSSIBLE VALUES F0R LAMBDA0
            DO 903 IL=1,INT(ABS(CTE0))
              LAMBDA0=LAMBDA00 + TWOPI*DFLOAT(IL-1)/DABS(CTE0)
              AM0=LAMBDA0-P0
 202          IF (AM0.GT.TWOPI) THEN
                AM0=AM0-TWOPI
                GOTO 202
              END IF
 203          IF (AM0.LT.CERO) THEN
                AM0=AM0+TWOPI
                GOTO 203
              END IF
C SOLVING KEPLER FOR PLANET 0
              CALL SOLKEP(E0,AM0,AEX0,IN)
C TRUE ANOMALY
              DCA0=DCOS(AEX0)
              AVE0=DACOS((DCA0-E0)/(UNO-E0*DCA0))
              IF(AM0.GT.PI) AVE0=TWOPI-AVE0
C VECTOR POSITION
              CALL RXYZ(A0,E0,J0,L0,P0,AEX0,AVE0,R0,X0,Y0,Z0)
        R0TO3=R0**3
C DISTANCE (P0-P1)**3
        DELTA01TO3=(DSQRT((X1-X0)**2+(Y1-Y0)**2+(Z1-Z0)**2))**3
C SCALAR PRODUCT R1*R0
        R1R0=X1*X0+Y1*Y0+Z1*Z0
        RF10=3.D0*R1R0/R1**5
C  DERIV R01 / DX1  AND  DERIV R01 / DY1
        DR01DX1=(X0-X1)/DELTA01TO3 - X0/R1TO3 + X1*RF10
        DR01DY1=(Y0-Y1)/DELTA01TO3 - Y0/R1TO3 + Y1*RF10
        DR01DZ1=(Z0-Z1)/DELTA01TO3 - Z0/R1TO3 + Z1*RF10
C FACTORIZED BY MASS
        DR01DX1=SM(1)*DR01DX1
        DR01DY1=SM(1)*DR01DY1
        DR01DZ1=SM(1)*DR01DZ1

        RF01=3.D0*R1R0/R0**5
C  DERIV R10 / DX0
        DR10DX0=(X1-X0)/DELTA01TO3 - X1/R0TO3 + X0*RF01
        DR10DY0=(Y1-Y0)/DELTA01TO3 - Y1/R0TO3 + Y0*RF01
        DR10DZ0=(Z1-Z0)/DELTA01TO3 - Z1/R0TO3 + Z0*RF01
C FACTORIZED BY MASS
        DR10DX0=SM(0)*DR10DX0
        DR10DY0=SM(0)*DR10DY0
        DR10DZ0=SM(0)*DR10DZ0


C  DERIV R01 / DX0
        DR01DX0 = (X1-X0)/DELTA01TO3 - X1/R1TO3
C  DERIV R01 / DY0
        DR01DY0 = (Y1-Y0)/DELTA01TO3 - Y1/R1TO3
C  DERIV R01 / DZ0
        DR01DZ0 = (Z1-Z0)/DELTA01TO3 - Z1/R1TO3
C FACTORIZED BY MASS
        DR01DX0=SM(1)*DR01DX0
        DR01DY0=SM(1)*DR01DY0
        DR01DZ0=SM(1)*DR01DZ0
C  DERIV R10 / DX1
        DR10DX1 = (X0-X1)/DELTA01TO3 - X0/R0TO3
        DR10DY1 = (Y0-Y1)/DELTA01TO3 - Y0/R0TO3
        DR10DZ1 = (Z0-Z1)/DELTA01TO3 - Z0/R0TO3
C FACTORIZED BY MASS
        DR10DX1 = SM(0)*DR10DX1
        DR10DY1 = SM(0)*DR10DY1
        DR10DZ1 = SM(0)*DR10DZ1
C DISTANCE P0-P2
        DELTA02TO3=(DSQRT((X2-X0)**2+(Y2-Y0)**2+(Z2-Z0)**2))**3
C SCALAR PRODUCT R2*R0
        R2R0=X2*X0+Y2*Y0+Z2*Z0
        RF20=3.D0*R2R0/R2**5
C  DERIV R02 / DX2  Y  DERIV R02 / DY2
        DR02DX2=(X0-X2)/DELTA02TO3 - X0/R2TO3 + X2*RF20
        DR02DY2=(Y0-Y2)/DELTA02TO3 - Y0/R2TO3 + Y2*RF20
        DR02DZ2=(Z0-Z2)/DELTA02TO3 - Z0/R2TO3 + Z2*RF20
C FACTORIZED BY MASS
        DR02DX2=SM(2)*DR02DX2
        DR02DY2=SM(2)*DR02DY2
        DR02DZ2=SM(2)*DR02DZ2
C  DERIV R02 / DX0
        DR02DX0 = (X2-X0)/DELTA02TO3 - X2/R2TO3
C  DERIV R02 / DY0
        DR02DY0 = (Y2-Y0)/DELTA02TO3 - Y2/R2TO3
C  DERIV R02 / DZ0
        DR02DZ0 = (Z2-Z0)/DELTA02TO3 - Z2/R2TO3
C FACTORIZED BY MASS
        DR02DX0 = SM(2)*DR02DX0
        DR02DY0 = SM(2)*DR02DY0
        DR02DZ0 = SM(2)*DR02DZ0
C  DERIV R20 / DX2
        DR20DX2 = (X0-X2)/DELTA02TO3 - X0/R0TO3
        DR20DY2 = (Y0-Y2)/DELTA02TO3 - Y0/R0TO3
        DR20DZ2 = (Z0-Z2)/DELTA02TO3 - Z0/R0TO3
C FACTORIZED BY MASS
        DR20DX2 = SM(0)*DR20DX2
        DR20DY2 = SM(0)*DR20DY2
        DR20DZ2 = SM(0)*DR20DZ2

        RF02=3.D0*R2R0/R0**5
C  DERIV R20 / DX0
        DR20DX0=(X2-X0)/DELTA02TO3 - X2/R0TO3 + X0*RF02
        DR20DY0=(Y2-Y0)/DELTA02TO3 - Y2/R0TO3 + Y0*RF02
        DR20DZ0=(Z2-Z0)/DELTA02TO3 - Z2/R0TO3 + Z0*RF02
C FACTORIZED BY MASS
        DR20DX0=SM(0)*DR20DX0
        DR20DY0=SM(0)*DR20DY0
        DR20DZ0=SM(0)*DR20DZ0

C DELTA POSITION 0
      POSR0X=DR01DX0+DR02DX0
      POSR0Y=DR01DY0+DR02DY0
      POSR0Z=DR01DZ0+DR02DZ0
C DELTA POSITION 1
      POSR1X=DR10DX1+DR12DX1
      POSR1Y=DR10DY1+DR12DY1
      POSR1Z=DR10DZ1+DR12DZ1
C DELTA POSITION 2
      POSR2X=DR20DX2+DR21DX2
      POSR2Y=DR20DY2+DR21DY2
      POSR2Z=DR20DZ2+DR21DZ2

      PLAN0 = (DR01DX0+DR02DX0)*POSR0X+(DR01DY0+DR02DY0)*POSR0Y+
     *(DR01DZ0+DR02DZ0)*POSR0Z+
     *DR01DX1*POSR1X+DR01DY1*POSR1Y+DR01DZ1*POSR1Z+
     *DR02DX2*POSR2X+DR02DY2*POSR2Y+DR02DZ2*POSR2Z

      PLAN1 = (DR10DX1+DR12DX1)*POSR1X+(DR10DY1+DR12DY1)*POSR1Y+
     *(DR10DZ1+DR12DZ1)*POSR1Z+
     *DR10DX0*POSR0X+DR10DY0*POSR0Y+DR10DZ0*POSR0Z+
     *DR12DX2*POSR2X+DR12DY2*POSR2Y+DR12DZ2*POSR2Z

      PLAN2 = (DR20DX2+DR21DX2)*POSR2X+(DR20DY2+DR21DY2)*POSR2Y+
     *(DR20DZ2+DR21DZ2)*POSR2Z+
     *DR21DX1*POSR1X+DR21DY1*POSR1Y+DR21DZ1*POSR1Z+
     *DR20DX0*POSR0X+DR20DY0*POSR0Y+DR20DZ0*POSR0Z


      RTOT0 = RTOT0 + PLAN0
      RTOT1 = RTOT1 + PLAN1
      RTOT2 = RTOT2 + PLAN2




 903        CONTINUE
 902      CONTINUE
 901    CONTINUE
C END OF LOOP FOR LAMBDAS
C VALUE OF THE INTEGRAL
C      RTOT ASSUMING K^2 = 1
        RTOT0=RTOT0/DABS(CTE0)/DFLOAT(IPASOS)**2
        RTOT1=RTOT1/DABS(CTE0)/DFLOAT(IPASOS)**2
        RTOT2=RTOT2/DABS(CTE0)/DFLOAT(IPASOS)**2
C DELTA T SQR OVER 2
        DTSQ2=0.5D0*A0*A1*A2*(2.D0*PI)**2/STARM
C WE DID NOT DIVIDE BY KGAUS**2 BECAUSE WE HAVE NOT MULTIPLIED BY
C KGAUS**2 WHEN CALCULATING THE DISTURBING FUNCTIONS R
C RHO(SIGMA):
        SIGMA(ISI)=TETA
        RP0(ISI)=RTOT0*DTSQ2
        RP1(ISI)=RTOT1*DTSQ2
        RP2(ISI)=RTOT2*DTSQ2
 900  CONTINUE
C END OF LOOP FOR SIGMA
C this is optional
C        OPEN(1,FILE='rho3sigma.dat',STATUS='UNKNOWN')
C        DO IN=1,ISIMAX+1
C        WRITE(1,40) SIGMA(IN), RP0(IN), RP1(IN), RP2(IN)
C        ENDDO
C       CLOSE(1)




C ====================================================================
C FIND RHO_MAX AND RHO_MIN
      VRMAX=-999999.D0
      VRMIN=999999.D0
      DO I2=1,ISIMAX
        IF(RP0(I2).LT.VRMIN) THEN
          VRMIN=RP0(I2)
        ENDIF
        IF(RP0(I2).GT.VRMAX) THEN
          VRMAX=RP0(I2)
        ENDIF
      ENDDO
C STRENGTH
      FUE0=(VRMAX-VRMIN)/2.D0
C FIND RHO_MAX AND RHO_MIN
      VRMAX=-999999.D0
      VRMIN=999999.D0
      DO I2=1,ISIMAX
        IF(RP1(I2).LT.VRMIN) THEN
          VRMIN=RP1(I2)
        ENDIF
        IF(RP1(I2).GT.VRMAX) THEN
          VRMAX=RP1(I2)
        ENDIF
      ENDDO
C STRENGTH
      FUE1=(VRMAX-VRMIN)/2.D0
C FIND RHO_MAX AND RHO_MIN
      VRMAX=-999999.D0
      VRMIN=999999.D0
      DO I2=1,ISIMAX
        IF(RP2(I2).LT.VRMIN) THEN
          VRMIN=RP2(I2)
        ENDIF
        IF(RP2(I2).GT.VRMAX) THEN
          VRMAX=RP2(I2)
        ENDIF
      ENDDO
C STRENGTH
      FUE2=(VRMAX-VRMIN)/2.D0




      RETURN
C 40   FORMAT(F6.1,3E26.16)
      END
C ========================================================================
C SOLVING KEPLER EQUATION (ADRIAN BRUNINI)
	SUBROUTINE SOLKEP(EX,M,E,NITER)
C SOLUCION ITERATIVA DE LA ECUACION DE KEPLER
C ENTRA:EX   EXCENTRICIDAD            (<1)
C       M    ANOMALIA MEDIA           (RADIANES)
C SALE: E    ANOMALIA EXCENTRICA      (RADIANES)
C
	 IMPLICIT REAL*8 (A-H,O-Z)
	 REAL*8 M,MK
	 TOLE=1.D-11
	 DOSPI=8.D0*DATAN(1.D0)
	 M=DMOD(M,DOSPI)
	 E=M
	 NITER=0
 100     E0=E
	 SE=DSIN(E0)
	 CE=DCOS(E0)
	 ES=EX*SE
	 EC=1.D0-EX*CE
	 MK=E0-ES
	 U=(MK-M)/EC
	 XPRI=E0-U
	 XSEG=E0-U/(1.D0-U*ES)
	 E=(XPRI+XSEG)/2.D0
	 DEX=DABS(E-E0)
	 NITER=NITER+1
	 IF(NITER.GT.20)GOTO 200
	 IF(DEX.GT.TOLE)GOTO 100
	 RETURN
200      CONTINUE
	 NDIC=0
	 E0=-DOSPI
	 DE0=DOSPI/10.D0
400      DE=DE0/(10.D0**NDIC)
	 SE=DSIN(E0)
	 CE=DCOS(E0)
	 ES=EX*SE
	 EM0=E0-ES-M
	 NITER=0
300      E1=E0+DE
	 NITER=NITER+1
	 IF(NITER.GT.100)THEN
	 WRITE(*,*)'ERROR IN KEPLER'
	 RETURN
	 ENDIF
	 SE=DSIN(E1)
	 CE=DCOS(E1)
	 ES=EX*SE
	 EM1=E1-ES-M
	 IF(EM1*EM0.GT.0.D0)THEN
	 E0=E1
	 EM0=EM1
	 GOTO 300
	 ELSE
	 NDIC=NDIC+1
	 IF(NDIC.EQ.3)THEN
	 E=E1
	 RETURN
	 ENDIF
	 GOTO 400
	 ENDIF
	 RETURN
	 END
C===================================================================
C CALCULATE R,X,Y,Z HELIOCENTRIC
	SUBROUTINE RXYZ(A,E,J,L,P,AEX,AVE,R,X,Y,Z)
	IMPLICIT REAL*8 (A-H,J-Z)
C HELIOCENTRIC DISTANCE
        R=A*(1.D0-E*DCOS(AEX))
C RADIUS VECTOR
        DCL=DCOS(L)
        DSL=DSIN(L)
        DCJ=DCOS(J)
        DSJ=DSIN(J)
        DCP=DCOS(P-L+AVE)
        DSP=DSIN(P-L+AVE)
        X=R*(DCL*DCP-DSL*DSP*DCJ)
        Y=R*(DSL*DCP+DCL*DSP*DCJ)
        Z=R*DSP*DSJ
	RETURN
	END
C===================================================================
C CALCULATE MCA POSITIONS  PLANET 0
	SUBROUTINE POSPLA(A,E,J,L,P,VECR,VECX,VECY,VECZ,LA)
	IMPLICIT REAL*8 (A-H,J-Z)
        INTEGER MCA
      	PARAMETER (MCA=100)
	DIMENSION VECR(MCA),VECX(MCA),VECY(MCA),VECZ(MCA),LA(MCA)
        TWOPI = 8.0D0*DATAN(1.0D0)
        PI=TWOPI/2.D0
	IPASOS=MCA
        DELTAAM=TWOPI/DFLOAT(IPASOS)
        AM=-DELTAAM
        DO  IMEDIA=1,IPASOS
C PARTICLE IN A FIXED POSITION
          AM=AM+DELTAAM
C LAMBDA = MEAN ANOMALY + LOPER
          LAMBDA=AM+P
 222      IF (LAMBDA.GT.TWOPI) THEN
            LAMBDA=LAMBDA-TWOPI
            GOTO 222
          END IF
          LA(IMEDIA)=LAMBDA
C SOLVING KEPLER FOR PARTICLE
          CALL SOLKEP(E,AM,AEX,IN)
C TRUE ANOMALY
          DCA=DCOS(AEX)
          AVE=DACOS((DCA-E)/(1.D0-E*DCA))
          IF(AM.GT.PI) AVE=TWOPI-AVE
          CALL RXYZ(A,E,J,L,P,AEX,AVE,R,X,Y,Z)
          VECR(IMEDIA)=R
          VECX(IMEDIA)=X
          VECY(IMEDIA)=Y
          VECZ(IMEDIA)=Z
        ENDDO
	RETURN
	END
C=================================================================
